return {
  -- LSP Configuration & Plugins
  'neovim/nvim-lspconfig',
  dependencies = {
    "tamago324/nlsp-settings.nvim",
    "williamboman/nvim-lsp-installer",
    "rcarriga/nvim-notify",

    -- Additional lua configuration, makes nvim stuff amazing!
    'folke/neodev.nvim',

    -- show signature while typing
    {
      'ray-x/lsp_signature.nvim',
      event = 'VeryLazy',
      opts = {
        select_signature_key = '<M-n>',
        toggle_key = '<M-x>',
        toggle_key_flip_floatwin_setting = true,
        floating_window = true,
        floating_window_above_cur_line = true,
        floating_window_off_x = 0,
        handler_opts = {
          border = 'none', -- double, rounded, single, shadow, none
        },
        doc_lines = 0,
        hint_enable = false,
        hint_prefix = ' ',
      },
      config = function(_, opts)
        require('lsp_signature').setup(opts)
      end,
    },
  },
  config = function()
    local lsp_installer = require("nvim-lsp-installer")
    local lspconfig = require("lspconfig")
    local nlspsettings = require("nlspsettings")

    nlspsettings.setup({
      config_home = vim.fn.stdpath("config") .. "/nlsp-settings",
      local_settings_dir = ".nlsp-settings",
      local_settings_root_markers_fallback = { ".git", "setup.py" },
      append_default_schemas = true,
      loader = "json",
    })

    --  This function gets run when an LSP connects to a particular buffer.
    local on_attach = function(_, bufnr)
      -- NOTE: Remember that lua is a real programming language, and as such it is possible
      -- to define small helper and utility functions so you don't have to repeat yourself
      -- many times.
      --
      -- In this case, we create a function that lets us more easily define mappings specific
      -- for LSP related items. It sets the mode, buffer and description for us each time.
      local nmap = function(keys, func, desc)
        if desc then
          desc = 'LSP: ' .. desc
        end

        vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
      end

      -- See `:help K` for why this keymap
      nmap('gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', 'Declaration')
      nmap('gd', '<cmd>lua vim.lsp.buf.definition()<CR>', 'Definition')
      nmap('K', '<cmd>lua vim.lsp.buf.hover()<CR>', 'Hover')
      nmap('gI', '<cmd>lua vim.lsp.buf.implementation()<CR>', 'Implementation')
      nmap('gr', '<cmd>lua vim.lsp.buf.references()<CR>', 'References')
      nmap('gl', '<cmd>lua vim.diagnostic.open_float()<CR>', 'Line diagnostic')
      nmap('<M-j>', '<cmd>lua vim.diagnostic.goto_next()<cr>', 'Next diagnostic')
      nmap('<M-k>', '<cmd>lua vim.diagnostic.goto_next()<cr>', 'Previous diagnostic')

      -- Create a command `:Format` local to the LSP buffer
      vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
        vim.lsp.buf.format()
      end, { desc = 'Format current buffer with LSP' })

      local cfg = require('lsp_signature').config
      require('lsp_signature').on_attach(cfg, bufnr)
    end

    -- Setup neovim lua configuration
    require('neodev').setup()

    -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

    lspconfig.util.default_config = vim.tbl_extend(
      "force",
      lspconfig.util.default_config,
      { capabilities = capabilities, }
    )

    lsp_installer.on_server_ready(function(server)
      server:setup({
        on_attach = on_attach
      })
    end)

    vim.diagnostic.config({
      virtual_text = false,
      signs = {
        active = {
          { name = "DiagnosticSignError", text = "" },
          { name = "DiagnosticSignWarn", text = "" },
          { name = "DiagnosticSignHint", text = "" },
          { name = "DiagnosticSignInfo", text = "" },
        },
      },
      underline = false,
      severity_sort = true,
      float = {
        focusable = false,
        style = "minimal",
        border = "rounded",
        source = "always",
        header = "",
        prefix = "",
      }
    })
  end
}
